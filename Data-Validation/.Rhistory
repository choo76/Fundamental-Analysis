url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=NYSE:', symbol, '&istart_date=', value, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(counter > 0) {
# can only get 5 time periods at a time
counter = counter - 5
counter = max(0, counter)
} else
break
}
table.temp
}
result <- get_advfn_data(STOCK_LIST[i], 'quarterly_reports', 100)
advfn_table <- rbind(result, advfn_table)
get_advfn_data <- function(symbol, report, counter) {
table.temp <- output_table
repeat {
# http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=NYSE:', symbol, '&istart_date=', counter, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(counter > 0) {
# can only get 5 time periods at a time
counter = counter - 5
counter = max(0, counter)
} else
break
}
table.temp
}
result <- get_advfn_data(STOCK_LIST[i], 'quarterly_reports', 100)
advfn_table <- rbind(result, advfn_table)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=AAPL&istart_date=100')
get_advfn_data <- function(symbol, report, counter) {
table.temp <- output_table
repeat {
# http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=', symbol, '&istart_date=', counter, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(counter > 0) {
# can only get 5 time periods at a time
counter = counter - 5
counter = max(0, counter)
} else
break
}
table.temp
}
result <- get_advfn_data(STOCK_LIST[i], 'quarterly_reports', 100)
url
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
url
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NYSE:AAPL&istart_date=100')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NASDAQ:AAPL&istart_date=100')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=5')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NYSE:AAPL&istart_date=5')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
View(data)
get_advfn_data <- function(symbol, report, counter) {
table.temp <- output_table
repeat {
# http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=NYSE:', symbol, '&istart_date=', counter, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(counter > 0) {
# can only get 5 time periods at a time
counter = counter - 5
counter = max(0, counter)
} else
break
}
table.temp
}
result <- get_advfn_data(STOCK_LIST[i], 'quarterly_reports', 100)
get_advfn_data <- function(symbol, report, counter) {
table.temp <- output_table
repeat {
# http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=NYSE:', symbol, '&istart_date=', counter, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(counter > 0) {
# can only get 5 time periods at a time
counter = counter - 5
counter = max(0, counter)
} else
break
}
table.temp
}
result <- get_advfn_data(STOCK_LIST[i], 'quarterly_reports', 100)
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=10')
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
symbol <- 'AA'
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
report <- 'quarterly_reports'
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$Value <- as.numeric(gsub(",", "", final$Value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('Symbol','Period','Metric','Value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
View(data)
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "Metric"
data = data[-1,]
final <- melt(data, id=c("Metric"))
View(final)
colnames(final)[2] <- 'Period'
final$Symbol <- symbol
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
data[is.na(data)] <- 0
View(data)
nrow(data)
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
View(data)
colnames(data) <- as.character(unlist(data[1,]))
View(data)
library(XML)
library(rlist)
library(dplyr)
library(reshape2)
library(XLConnect)
library(data.table)
setwd("/Users/jtan/Documents/Investment/Fundamental-Analysis/Data-Validation/")
# avoid scientific number format
options(scipen=999)
STOCK_LIST = c('MSFT','MMM')
output_table <- data.frame (
symbol=character(),
source=character(),
report=character(),
period=character(),
metric=character(),
value=numeric(),
stringsAsFactors=FALSE
)
# report: annual_reports, quarterly_reports
# value: number of records available
# symbol: may need to append NYSE or NASDAQ labels
get_advfn_data <- function(symbol, source, report, value) {
table.temp <- output_table
repeat {
# http://uk.advfn.com/p.php?pid=financials&btn=quarterly_reports&symbol=NVDA&istart_date=100
url <- paste('http://uk.advfn.com/p.php?pid=financials&btn=', report, '&symbol=NYSE:', symbol, '&istart_date=', value, sep="")
tables <- readHTMLTable(url)
tables <- list.clean(tables, fun = is.null, recursive = FALSE)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
data <- tables[[which.max(n.rows)]]
# selecting the desired metric
# Income Statement: Revenue, Gross Profit, Operating Income, Net Income, EPS, EBITDA
# Cash Flow: Operating Cash Flow, Free Cash Flow
if(report == 'quarterly_reports') {
toMatch <- c('quarter end date', 'total revenue', 'gross operating profit', 'operating income', 'total net income', 'Basic EPS - Total', 'EBITDA', 'net cash from total operating activities', 'free cash flow')
} else {
toMatch <- c('year end date', 'total revenue', 'gross operating profit', 'operating income', 'total net income', 'Basic EPS - Total', 'EBITDA', 'net cash from total operating activities', 'free cash flow')
}
data <- filter(data, data$V1 %in% toMatch)
data[is.na(data)] <- 0
if(nrow(data) > 0) {
# remove empty columns
data <- data[, sapply(data, function(col) nlevels(col) > 1)]
# reshape and organize data
colnames(data) <- as.character(unlist(data[1,]))
colnames(data)[1] <- "metric"
data = data[-1,]
final <- melt(data, id=c("metric"))
colnames(final)[2] <- 'period'
final$symbol <- symbol
final$source <- source
if(report == 'quarterly_reports') {
final$report <- 'Q'
} else {
final$report <- 'Y'
}
final$value <- as.numeric(gsub(",", "", final$value, fixed = TRUE))
i <- sapply(final, is.factor)
final[i] <- lapply(final[i], as.character)
final$period <- gsub("/", "-", final$period)
final <- final[c('symbol','source','report','period','metric','value')]
# only add not already present data
data <- anti_join(final, table.temp)
if(nrow(data) > 0) {
table.temp = rbind(data, table.temp)
}
}
if(value > 0) {
# can only get 5 time periods at a time
value = value - 5
value = max(0, value)
} else
break
}
table.temp
}
# table initialization
advfn_table <- output_table
for (i in 1:length(STOCK_LIST)) {
result <- get_advfn_data(STOCK_LIST[i], 'ADVFN', 'quarterly_reports', 100)
advfn_table <- rbind(result, advfn_table)
result <- get_advfn_data(STOCK_LIST[i], 'ADVFN', 'annual_reports', 100)
advfn_table <- rbind(result, advfn_table)
}
# standardize metric names
advfn_table$metric <- gsub('total revenue', 'Revenue', advfn_table$metric)
advfn_table$metric <- gsub('gross operating profit', 'Gross Profit', advfn_table$metric)
advfn_table$metric <- gsub('operating income', 'Operating Income', advfn_table$metric)
advfn_table$metric <- gsub('total net income', 'Net Income', advfn_table$metric)
advfn_table$metric <- gsub('Basic EPS - Total', 'EPS', advfn_table$metric)
advfn_table$metric <- gsub('net cash from total operating activities', 'Operating Cash Flow', advfn_table$metric)
advfn_table$metric <- gsub('free cash flow', 'Free Cash Flow', advfn_table$metric)
# retain only the last 5 reproting periods
#truncated <- morningstar_table %>% distinct(morningstar_table$period) %>% mutate_if(is.factor, as.character)
#colnames(truncated)[1] <- 'period'
#advfn_table <- merge(truncated, advfn_table, by='period')
#advfn_table <- advfn_table[c('symbol','source','report','period','metric','value')]
